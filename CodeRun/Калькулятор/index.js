function coderun_calculator(n) {
  n = parseInt(n) // могут передать строку

  // Пограничное значние
  if (n === 0) {
    return {
      count: 0,
      way: '0'
    }
  }

  // Пограничное значние
  if (n === 1) {
    return {
      count: 0,
      way: '1'
    }
  }

  const map = new Map() // Создание коллекции
  const way = [] // Массив для записи кратчайшего пути

  let index // сюда запишем индекс вершины, от которой грань ведёт к "n"

  map.set(1, {parent: null, arr: [2, 3]}); // Первой всегда будет единица

  // Обходим коллекцию. На первой итерации всего одно значение, но коллекция динамически дополняется, поэтому цикл работает нормально
  for (let [i, value] of map) {

    // Если в коллекции отсутствует вершина (i + 1, i * 2, i * 3) и она меньще n
    // то добавим новые элементы в коллекцию, причем элемент такой: { parent: i, arr: []}
    // где parent - это "родительская" вершина графа, а также пустой массив
    if (!map.has(i + 1) && i + 1 < n) { map.set(i + 1, {parent: i, arr: []}) }
    if (!map.has(i * 2) && i * 2 < n) { map.set(i * 2, {parent: i, arr: []}) }
    if (!map.has(i * 3) && i * 3 < n) { map.set(i * 3, {parent: i, arr: []}) }

    // Выше поработали с будущими вершинами, теперь работаем с текущей вершиной i
    // Достаточно добавить в текущий элемент коллекции arr, а parent менять не надо
    // arr состоит из трех элементов [i + 1, i * 2, i * 3] 
    map.set(i, {...map.get(i), arr: [i + 1, i * 2, i * 3]}) // добавить проверку на лишние значения ( > n)

    // Если условие совпало, значит найден искомый элемент
    // Сохраняем индекс вершины и завершаем цикл обхода графа
    if (i + 1 === n || i * 2 === n || i * 3 === n) {
      index = i
      break
    }
  }

  way.push(n)
  way.push(index)

  // Просто ищем по вершинам в цикле, смотрим на каждый parent элемента коллекции и поднимаемся по нему наверх
  while (index >= 1) {
    const parent = map.get(index).parent
    if (parent === null) {
      break
    }
    way.push(parent)
    index = parent
  }

  return {
    count: way.length - 1,
    way: way.reverse().join(' ').trim(),
  }

}